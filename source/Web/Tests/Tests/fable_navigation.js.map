{"version":3,"sources":["../fable_navigation.fsx"],"names":[],"mappings":"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","file":"fable_navigation.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"fable_Commands.fsx\"\nopen Commands\n#load \"fable_domainModel.fsx\"\nopen Fable_domainModel\n#load \"fable_backend.fsx\"\nopen Backend\n\nopen Fable.Core\nopen Fable.Import\nopen System\nopen Fable.Core.JsInterop\nmodule R = Fable.Helpers.React\nopen R.Props\nopen Fable.Helpers.ReactRedux\nopen Fable.Helpers.ReduxThunk\n\ntype [<Pojo>] NavigationViewState = \n    { \n        trackingIdentifier: string\n        SelectedTrack : string\n        beginDateTimeLocal : DateTime\n        endDateTimeLocal : DateTime\n        VisualizeRecordedTracks : string               \n    }\n\ntype [<Pojo>] ModelViewProps = {\n    onLoadTracks : unit -> unit \n    onBeginTracking : string -> unit\n    onStopTracking : string -> unit\n    onLoadTrackingPoints : DateTime * DateTime * string -> unit\n    onClearTrackingPoints : unit -> unit\n    Tracks : Track List\n}\n\n[<KeyValueList>]\ntype AdditionalHtmlAttr = \n    |[<CompiledName(\"data-toggle\")>]DataToggle of string \n    |[<CompiledName(\"data-target\")>]DataTarget of string\n    |[<CompiledName(\"aria-label\")>]AriaLabel of string\n    |[<CompiledName(\"aria-haspopup\")>]AriaHasPopup of string\n    |[<CompiledName(\"aria-expanded\")>]AriaExpanded of string\n    interface IHTMLProp\n\ntype NavigationView(props) =\n    inherit React.Component<ModelViewProps, NavigationViewState>(props)      \n    do base.setInitState({ \n                            trackingIdentifier = \"\"\n                            SelectedTrack = \"\"\n                            beginDateTimeLocal = DateTime.Now\n                            endDateTimeLocal = DateTime.Now\n                            VisualizeRecordedTracks = \"Visualize Recorded Tracks\"        \n                        })\n\n    member this.componentDidMount (_) =\n        this.props.onLoadTracks()\n    member this.onBeginTracking(_) = \n        this.props.onBeginTracking this.state.trackingIdentifier\n\n    member this.onStopTracking(_) =         \n        this.props.onStopTracking this.state.trackingIdentifier\n\n    member this.onBeginDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { \n                trackingIdentifier = this.state.trackingIdentifier\n                SelectedTrack = this.state.SelectedTrack\n                beginDateTimeLocal = unbox e.target?value\n                endDateTimeLocal = this.state.endDateTimeLocal\n                VisualizeRecordedTracks = this.state.VisualizeRecordedTracks                \n            })\n\n    member this.onEndDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { \n                trackingIdentifier = this.state.trackingIdentifier\n                SelectedTrack = this.state.SelectedTrack\n                beginDateTimeLocal = this.state.beginDateTimeLocal\n                endDateTimeLocal = unbox e.target?value\n                VisualizeRecordedTracks = this.state.VisualizeRecordedTracks                \n            })\n\n    member this.onTrackSelected(e: React.FormEvent) =\n        let selectedTrackName = unbox e.target?value\n        let selectedTrack = this.props.Tracks |> List.find (fun i -> i.name = selectedTrackName)\n        this.setState(\n            { \n                trackingIdentifier = this.state.trackingIdentifier\n                SelectedTrack = selectedTrack.name\n                beginDateTimeLocal = selectedTrack.mintimestamp\n                endDateTimeLocal = selectedTrack.maxtimestamp\n                VisualizeRecordedTracks = this.state.VisualizeRecordedTracks                \n            })\n        e.preventDefault()\n\n    member this.onLoadTrackingPoints(_) =\n        this.props.onLoadTrackingPoints(this.state.beginDateTimeLocal, this.state.endDateTimeLocal, this.state.SelectedTrack)\n\n    member this.onClearTrackingPoints(_) = \n        this.props.onClearTrackingPoints()\n    member this.getTrackSelection() = \n        R.select [ \n                    Id \"trackSelection\"                                                           \n                    Value (U2.Case1 this.state.SelectedTrack)\n                    OnChange this.onTrackSelected                                                                                                                                          \n                 ] (this.props.Tracks\n                   |> List.map (fun t -> R.option [                                                    \n                                                     Value (U2.Case1 t.name)\n                                                   ] [ unbox t.name]))\n\n    member this.render () =\n\n        R.div [ ClassName \"masthead clearfix\" ] [\n            R.div [ ClassName \"inner\"] [\n                R.nav [ ClassName \"navbar navbar-default\"] [\n                    R.div [ClassName \"container-fluid\" ] [\n                        R.div [ClassName \"navbar-header\"] [\n                            R.button [ \n                                Type \"button\"\n                                ClassName \"navbar-toggle collapsed\"\n                                DataToggle \"collapse\" \n                                DataTarget \"#bs-example-navbar-collapse-1\"\n                                ] [\n                                    R.span [ClassName \"sr-only\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                ]\n                        ]\n                        R.div [ \n                            Id \"bs-example-navbar-collapse-1\"\n                            ClassName \"collapse navbar-collapse\"] [ \n                                R.ul [ ClassName \"nav navbar-nav\"] [ \n                                    R.li [ ] [ \n                                        R.form [ \n                                            ClassName \"form-horizontal\"\n                                            Style [ \n                                                MarginLeft \"15px\" \n                                                MarginRight \"15px\"  ]] [ \n                                                R.div [ ClassName \"form-group\" ] [ \n                                                    R.button [ \n                                                        OnClick this.onBeginTracking\n                                                        ClassName \"btn btn-default btn-succes active\" ] [ \n                                                            unbox \"Track...\"\n                                                    ]\n                                                    R.button [ \n                                                        OnClick this.onStopTracking\n                                                        ClassName \"btn btn-default btn-danger\" ] [ \n                                                            unbox \"Stop Tracking\"\n                                                    ]\n                                                ]\n                                                R.div [ ClassName \"form-group\" ] [\n                                                    R.label [ ClassName \"col-md-4  col-sm-4 col-xs-4 control-label\" ] [ unbox \"Tracking Id\" ]\n                                                    R.div [ ClassName \"col-md-8  col-sm-8 col-xs-11\"; AriaLabel \"...\" ] [\n                                                        R.input [ \n                                                            Type \"text\" \n                                                            Id \"trackIdentifier\" \n                                                            Value (U2.Case1 this.state.trackingIdentifier)\n                                                        ] []                                                    \n                                                    ]                                                    \n                                                ]\n                                        ]\n                                    ]\n                                    R.li [ Role \"presentation\"; ClassName \"dropdown\" ] [ \n                                       R.a [ ClassName \"dropdown-toggle\"; DataToggle \"dropdown\"; Href \"#\"; Role \"button\"; AriaHasPopup \"true\"; AriaExpanded \"false\" ] [ \n                                            unbox this.state.VisualizeRecordedTracks\n                                            R.span [ClassName \"caret\"] [ ]\n                                       ]\n                                       R.ul [ ClassName \"dropdown-menu\"] [ \n                                           R.li [] [ \n                                               R.div [ ClassName \"container-fluid\" ] [ \n                                                   R.div [ ClassName \"row\" ] [ \n                                                       R.label [ ] [ unbox \"from\" ]\n                                                       R.input [ Type \"datetime-local\"\n                                                                 Value (U2.Case1(this.state.beginDateTimeLocal.ToString()))\n                                                                 OnChange this.onBeginDateTimeLocalChanged ] [ ]\n                                                   ]\n                                                   R.div [ ClassName \"row\" ] [ \n                                                       R.label [ ] [ unbox \"until\" ]\n                                                       R.input [ Type \"datetime-local\"\n                                                                 Value (U2.Case1(this.state.endDateTimeLocal.ToString()))\n                                                                 OnChange this.onEndDateTimeLocalChanged ] [ ]\n                                                   ]\n                                                   R.div [ ClassName \"row\" ] [ \n                                                       this.getTrackSelection()\n                                                   ]\n                                                   R.div [ ClassName \"row\" ] [ \n                                                       R.button [ \n                                                           OnClick this.onLoadTrackingPoints\n                                                       ] [ unbox \"Load Track Points\"]\n                                                       R.button [ \n                                                           OnClick this.onClearTrackingPoints\n                                                       ] [ unbox \"Clear\"]\n                                                   ]\n                                               ]\n                                           ]\n                                       ]\n                                    ]\n                                    //         <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    //         Visualize Recorded Tracks <span class=\"caret\"></span>\n                                    //         </a>\n                                    //         <ul class=\"dropdown-menu\">\n                                    //             <li>\n                                    //                 <div class=\"container-fluid\">\n                                    //                     <div class=\"row\">\n                                    //                         <label>from</label>\n                                    //                         <input type=\"datetime-local\" data-bind=\"value : beginDate\" />\n                                    //                     </div>\n                                    //                     <div class=\"row\">\n                                    //                         <label>until</label>\n                                    //                         <input type=\"datetime-local\" data-bind=\"value : endDate\" />\n                                    //                     </div>\n                                    //                     <div class=\"row\">\n                                    //                         <!--<label>Tracking Id</label>-->\n                                    //                         <select id=\"trackSelection\" data-bind=\"options: tracksMetadata,\n                                    //                             optionsText: 'name',\n                                    //                             value: selectedTrack,\n                                    //                             optionsCaption: 'Choose...'\"></select>\n                                    //                         <!--<div class=\"dropdown\">\n                                    //                             <button class=\"btn dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Tracking Id\n                                    //                                 <span class=\"caret\"></span></button>\n                                    //                             <ul class=\"dropdown-menu\" role=\"menu\" data-bind=\"foreach: tracksMetadata\">\n                                    //                                 <li>\n                                    //                                     <a role=\"menuitem\" tabindex=\"-1\" href=\"#\" data-bind=\"text: name, click: $parent.selectedTrack\"></a>\n                                    //                                 </li>\n                                    //                             </ul>\n                                    //                         </div>-->\n                                    //                     </div>\n                                    //                     <div class=\"row\">\n                                    //                         <button onclick=\"loadTrackingPoints()\">Load Track Points</button>\n                                    //                     </div>\n                                    //                 </div>\n                                    //             </li>\n                                    //         </ul>\n                                    //     </li>\n                                ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n                        \n        // let className =\n        //     classNames(\n        //         createObj [\n        //             \"completed\" ==> this.props.todo.completed\n        //             \"editing\" ==> this.props.editing\n        //         ])\n        // // The React helper defines a simple DSL to build HTML elements.\n        // // For more info about transforming F# unions to JS option objects:\n        // // https://fable-compiler.github.io/docs/interacting.html#KeyValueList-attribute\n        // R.li [ ClassName className ] [\n        //     R.div [ ClassName \"view\" ] [\n        //         R.input [\n        //             ClassName \"toggle\"\n        //             Type \"checkbox\"\n        //             Checked this.props.todo.completed\n        //             OnChange this.props.onToggle  \n        //         ] []\n        //         R.label [ OnDoubleClick this.handleEdit ]\n        //                 [ unbox this.props.todo.title ]\n        //         R.button [\n        //             ClassName \"destroy\"\n        //             OnClick this.props.onDestroy ] [ ]\n        //     ]\n        //     R.input [\n        //         ClassName \"edit\"\n        //         Ref (fun x -> editField <- Some x)\n        //         Value (U2.Case1 this.state.editText)\n        //         OnBlur this.handleSubmit\n        //         OnChange this.handleChange\n        //         OnKeyDown this.handleKeyDown\n        //     ] []\n        // ]\n\nlet private mapStateToProps (state : LocationTracker) (ownprops : ModelViewProps) =\n    { ownprops with\n        Tracks = state.Tracks        \n    }\n\nlet private mapDispatchToProps (dispatch : ReactRedux.Dispatcher) ownprops =\n    { ownprops with\n        onLoadTracks = fun () -> dispatch <| asThunk (Backend.getAllTracks)   \n        onLoadTrackingPoints = fun(start, ``end``, trackName) -> dispatch <| asThunk (Backend.loadTrackingPoints(start, ``end``, trackName))\n        onClearTrackingPoints = fun () -> dispatch(Commands.ClearTrackingPoints)\n    }\n\nlet private setDefaultProps (ownprops : ModelViewProps) =\n    { ownprops with\n         Tracks = List.Empty }         \n\nlet createNavigationViewComponent =\n    createConnector ()\n    |> withStateMapper mapStateToProps\n    |> withDispatchMapper mapDispatchToProps\n    |> withProps setDefaultProps\n    |> buildComponent<NavigationView, _, _, _>"]}