{"version":3,"sources":["../fable_backend.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAuBK;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAMO;AAAA;AAAA;;AAMR;AAAA,KAA4B;AAAA;AAAQ,KAApC;AAAA;AAAA;AAAA;;AACQ,YACJ;AAAA,0BAAyC;AAAA,aAAsB;AAAA;AAAQ,aAA9B;AAAA;AAAA;AAA8B,SAAvE;AAA4E,KADxE;AAAA;AAAA;AAGX;;AAEG,OAmBG;AAAA,WAlBH;AAAA,8BACI;AAAA,aAA0B;AAAA;AAAQ,aAAlC;AAAA;AAAA;;AACA,mBACI,sBAEI;AAAA;AAAA;AAAA,aAFJ,CADJ,MAOA;AAAA,8BACI;AAAA,2BAAc,YAAd,MACA;AAAA,yBAGsF;AAAA;AAAQ,yBAH9F,EAG2D;AAAA;AAHjD,iDAAoB;AAAA,iDACe,MAAe,gCAAf,CADf,EAEiB,MAAe,gCAAf,CAFjB,EAGS,gBAHT;AAAA,6BAApB;AAGiD,yBAH3D;;AAAA;AAG8F,qBAJ9F;AAAyC,iBAD7C,MAOI;AAAA;AAAA;AAAqE;AAAA,aAdzE;AAcyE,SAhB7E;AAAA,0BAkBG;AAAkB;AAErB,OAsBG;AAAA,WArBH;AAAA,8BACI;AAAA,mBACI,WAAY,0BAAZ,EAAwC,qCAAxC,EAA0E;AAAA;AAAA,aAA1E,CADJ,MAIA;AAAA,8BACI;AAAA,2BAAa,YAAb,MACI;AAA0D,4DAAoB;AACkB;AACC;AACF,qDAAe,6BAAf;AAHjB;AAAA;AAAA;AAAA;AASD,yBATnB;;AAU9D;AAAA;AAAQ,yBAAR,EAAU;AAAA;AAAA;AAAA,yBAAV;;AAAA;AAVkB,qBADlB;AAAkC,iBADtC,MAcI;AAAA;AAAA;AAAoE;AAAA,aAlBxE;AAAA,SADJ;AAAA,0BAqBG;AAAkB","file":"fable_backend.js","sourcesContent":["module Backend\n\n#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"fable_domainModel.fsx\"\nopen Fable_domainModel\n#load \"fable_Commands.fsx\"\nopen Commands\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.PowerPack\nopen Fable.PowerPack.Fetch\nopen Fable.PowerPack.Fetch.Fetch_types\nopen Fable.Core.JsInterop\nopen System\nopen Fable.PowerPack.Fetch.Fetch_types\n\n[<Measure>]\ntype ms\n\ntype LoadTrackingPointsDto = {\n    beginDate : DateTime\n    endDate : DateTime\n}\n\n\nlet private jsonHeaders = \n    [ HttpRequestHeaders.Accept \"application/json\"\n      HttpRequestHeaders.ContentType \"application/json\"           \n    ]\n\nlet private dispatchShowError (dispatch : ReactRedux.Dispatcher) (time : int<ms> option) error =\n    Commands.ShowError error |> dispatch\n    time |> Option.iter (fun t -> \n        Browser.window.setTimeout(box (fun () -> Commands.HideError |> dispatch), t) \n        |> ignore\n)\n\nlet getAllTracks (dispatch : ReactRedux.Dispatcher) =\n    promise {\n        Commands.LoadingTracks |> dispatch\n        let! response =\n            fetch\n                (\"/api/tracks\")\n                [ \n                    RequestProperties.Headers jsonHeaders \n                    Method HttpMethod.OPTIONS\n                ]                \n        if response.Ok then\n            let! tracks = response.json<obj array> ()\n            tracks |> Array.map (fun i -> { \n                                            mintimestamp=DateTime.Parse(string i?mintimestamputc?date);\n                                            maxtimestamp = DateTime.Parse(string i?maxtimestamputc?date); \n                                            name = string i?name }) |> Commands.ReceivedTracks |> dispatch\n        else\n            dispatchShowError dispatch None \"Could not fetch tracks from server!\"\n    }\n    |> Promise.map ignore\n\nlet loadTrackingPoints (start, ``end``,  trackName) (dispatch : ReactRedux.Dispatcher) =\n    promise {\n        let! response = \n            postRecord (\"/api/tracks/\" + trackName) {beginDate=start;endDate=``end``} [ \n                    RequestProperties.Headers jsonHeaders                                          \n                ]\n        if response.Ok then\n            let! track = response.json<obj> ()                \n            let trackingPoints = (downcast (box track?trackingpoints)) |> Array.map (fun t -> { \n                                                                                                latitude = (box t?latitude) :?> double\n                                                                                                longitude = (box t?longitude) :?> double\n                                                                                                timestamputc = DateTime.Parse(string t?timestamputc?date)\n                                                                                                speed = 0.0\n                                                                                                elevation = 0.0\n                                                                                                distance = 0.0\n                                                                                                distanceCovered = 0.0\n                                                                                                index = 0\n                                                                                            })        \n            dispatch (Commands.ReceivedTrack trackingPoints)\n        else\n            dispatchShowError dispatch None \"Could not fetch track from server!\"  \n    } \n    |> Promise.map ignore\n"]}