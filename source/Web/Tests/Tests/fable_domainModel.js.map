{"version":3,"sources":["../fable_domainModel.fsx"],"names":[],"mappings":"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","file":"fable_domainModel.js","sourcesContent":["open System\n\ntype TrackingJob = {\n    identifier : string;\n    marker : string;\n    mutable subscription : obj;\n    latitude : double;\n    longitude : double;\n    utcTimestamp : DateTime;\n    updatePositionOnMap : bool;\n    observe : bool; \n}\n\ntype ILocationQuery =\n    abstract member Subscribe: TrackingJob -> (string -> double -> double -> DateTime -> unit) -> unit\n    abstract member UnSubscribe : TrackingJob -> unit\n\ntype Track = {\n    mintimestamp : DateTime;\n    maxtimestamp : DateTime;\n    name : string;\n}\n\ntype TrackingPoint = {\n   latitude : double;\n   longitude : double;\n   timestamputc : DateTime;\n   speed : double;\n   distanceCovered : double;\n   distance : double;\n   index : int;\n   elevation : double;      \n}\n\ntype ElevationPoint = {\n    index : int\n    elevation : double\n}\n\nlet toRad x =\n    x * Math.PI / 180.0\n\nlet distance lat1 lon1 lat2 lon2 =\n    let R = 6371.0 // Radius of the earth in km\n    let dLat = toRad(lat2 - lat1)  // Javascript functions in radians\n    let dLon = toRad(lon2 - lon1)\n    let a = Math.Sin(dLat / 2.0) * Math.Sin(dLat / 2.0) +\n            Math.Cos(toRad(lat1)) * Math.Cos(toRad(lat2)) *\n            Math.Sin(dLon / 2.0) * Math.Sin(dLon / 2.0)\n    let c = 2.0 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1.0 - a))\n    let d = R * c // Distance in km\n    d * 1000.0\n\n\ntype TrackVisualization(name : string, points : TrackingPoint List) =         \n    member val ElevationPoints : ElevationPoint[] = Array.empty with get, set\n    member this.Points = points     \n    member this.TrackName = name\n    \n\n    member this.totalDistanceInMeters () = \n        this.Points.[this.Points.Length - 1].distanceCovered;\n\n    member this.AssignElevationPoints elevationPoints = \n        this.ElevationPoints <- elevationPoints        \n\n    member this.getIndexOfNearestPoint (distanceInMeters) =   \n        match this.Points |> List.tryFindIndex (fun (p) -> p.distanceCovered >= distanceInMeters) with\n            | Some index -> index\n            | None -> this.Points.Length - 1\n\n    member this.getGeoPointFromElevationDataIndex (index : int) =\n        let meters = (double index / double this.Points.Length) * this.totalDistanceInMeters();\n        let markerPointIndex = this.getIndexOfNearestPoint(meters);\n        let geoPoint = this.getPointAt(markerPointIndex);\n        geoPoint;\n  \n\n    member this.getPointAt index =\n        this.Points.[index]    \n\n    static member  calculate points =\n        let mutable totalDistance = 0.0        \n        points\n        |> List.mapi (fun i p ->\n                        match i with\n                        | 0 -> {p with speed = 0.0; distanceCovered = 0.0; index = i }\n                        | _ ->  \n                            let distanceBetween = distance points.[i - 1].latitude points.[i - 1].longitude p.latitude p.longitude\n                            let timespan = p.timestamputc - points.[i - 1].timestamputc\n                            let speed = if timespan > TimeSpan.Zero then\n                                            distanceBetween / (timespan.TotalMilliseconds / 1000.0)\n                                        else \n                                            0.0\n                            totalDistance <- totalDistance + distanceBetween                         \n                            {p with\n                                speed = speed\n                                distance = distanceBetween\n                                distanceCovered = totalDistance\n                                index = i\n                            }\n                       )                             \n     \n\n\ntype TrackingService(locationQuery : ILocationQuery) = \n    member this.LocationQuery : ILocationQuery = locationQuery\n\n    member val ownTrackingJob = {            \n            identifier = String.Empty;\n            marker = String.Empty;\n            subscription = String.Empty;\n            latitude = 0.0;\n            longitude = 0.0;\n            utcTimestamp = DateTime.UtcNow;\n            updatePositionOnMap = true;\n            observe = true;}\n    member val observedTrackingJobs : TrackingJob List = List.Empty with get, set    \n    \n    member this.CreateTrackingJob name latitude longitude =\n        {            \n            identifier = name;\n            marker = String.Empty;\n            subscription = String.Empty;\n            latitude = latitude;\n            longitude = longitude;\n            utcTimestamp = DateTime.UtcNow;\n            updatePositionOnMap = true;\n            observe = true;        \n        }\n    \n    member this.AddTrackingJob job =                                    \n        if not(this.ContainsTrackingJob(job.identifier)) then\n            this.LocationQuery.Subscribe job this.OnPositionChanged\n            this.observedTrackingJobs <- this.observedTrackingJobs @ [job]    \n        ignore\n\n    member this.OnPositionChanged name latitude longitude timestamputc = \n\n        ignore()\n\n    member this.DeleteTrackingJob(job) =\n        this.observedTrackingJobs <- List.where (fun j -> j <> job) this.observedTrackingJobs    \n    \n    member this.ContainsTrackingJob(name) =\n        List.exists (fun j -> j.identifier = name) this.observedTrackingJobs\n\n\n\ntype LocationTracker = {\n    TrackingService : TrackingService\n    Visualization : TrackVisualization\n    Tracks : Track List\n    Error : string option\n}\n    \n    \n"]}