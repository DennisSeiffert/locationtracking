{"version":3,"sources":["../fable_domainModelTests.fsx"],"names":[],"mappings":";;;;;;;;;;AAeQ;AAAA;AAAA;AAAA;AAGJ;AAAA,gBAAY,gBAAZ;AAAsB;AACtB;AAAA,iBAAa,gBAAb;AAAuB;AACvB;AAAA,gBAAY,iBAAZ;AAAuB;AACvB,sBAAa,iBAAb;AANO;;;;AAUD;AAAK,kBAAI,eAAJ;AACA;AACA,kBAAI,eAAJ;AACA,yBAAkB,qBAAlB;AAEN,qBADF,YAAiB,EAAI,mBAAiB,SAArB,CAAjB,QACE;AALG","file":"fable_domainModelTests.js","sourcesContent":["#r \"../../packages/FsUnit/lib/net45/FsUnit.NUnit.dll\"\n#r \"../../packages/NUnit/lib/net45/nunit.framework.dll\"\nopen FsUnit\nopen NUnit.Framework\n\n[<TestFixture>]\nmodule MyTests =\n\n  // Convenience method\n  let equal (expected: 'T) (actual: 'T) =\n        ignore\n      //Assert.AreEqual(expected, actual)\n\n  [<Test>]\n  let ``Structural comparison with arrays works``() =\n    let xs1 = [| 1; 2; 3 |]\n    let xs2 = [| 1; 2; 3 |]\n    let xs3 = [| 1; 2; 4 |]\n    equal true (xs1 = xs2)\n    equal false (xs1 = xs3)\n    equal true (xs1 <> xs3)\n    equal false (xs1 <> xs2)\n  \n  [<Test>]\n  let ``Set.intersectMany works``() =\n      let xs = set [1; 2]\n      let ys = Set.singleton 2\n      let zs = set [2; 3]\n      let ks = Set.intersectMany [xs; ys; zs] \n      (ks.Contains 2 && not(ks.Contains 1 || ks.Contains 3))\n      |> equal true"]}