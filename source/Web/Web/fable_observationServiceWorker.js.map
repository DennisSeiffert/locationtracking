{"version":3,"sources":["../fable_observationServiceWorker.fsx"],"names":[],"mappings":";;;AAoBI,6BAAqD,6BAArD;AAEJ,iCACQ;AAAW;;AAEf,QAAG,4BAAH,EACI;AAAA;;AAEA,sCACI;AAAA,4BACI;AAAA;AAGsB,aAJ1B;AAKC,SANL;AAOW;;AAZX;AAAI,CADZ;AAiBA,iCACQ;AAAA;AAAqC,CAD7C","file":"fable_observationServiceWorker.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n// #r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#load \"./fable_backend.fsx\"\nopen Fable.Core\nopen Fable.Import\n// open System\nopen Fable.Core.JsInterop\nopen Backend\n\n// type swMessage = {\n//     command : string\n//     message : string\n// }\n\n[<Emit(\"this.clients\")>]\nlet clients() = jsNative\n\n[<Emit(\"self\")>]\nlet self() = jsNative\n\nlet locationService : Fable_domainModel.ILocationQuery = new Backend.LocationService(\"fefref\") :> Fable_domainModel.ILocationQuery\n\nself()?addEventListener(\"message\", fun event ->    \n    let data = box event?data //:?> swMessage\n    \n    if box (data?command)  = box \"broadcast\" then\n        Browser.console.log(\"Broadcasting to clients\")\n\n        clients()?matchAll()?``then``(fun(clients) ->\n            clients?forEach(fun(client) ->\n                client?postMessage(\"{\n                                    command : 'broadcastOnRequest'\n                                    message : 'This is a broadcast on request from the SW'\n                                   }\") |> ignore                \n            ) |> ignore\n        ) |> ignore\n    null\n)\n\nself()?addEventListener(\"install\", fun event ->\n        Browser.console.log(\"installing....\")                        \n)"]}