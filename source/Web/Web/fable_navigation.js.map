{"version":3,"sources":["../fable_navigation.fsx"],"names":[],"mappings":"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","file":"fable_navigation.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"fable_Commands.fsx\"\nopen Commands\n#load \"fable_domainModel.fsx\"\nopen Fable_domainModel\n#load \"fable_backend.fsx\"\nopen Backend\n\nopen Fable.Core\nopen Fable.Import\nopen System\nopen Fable.Core.JsInterop\nmodule R = Fable.Helpers.React\nopen R.Props\nopen Fable.Helpers.ReactRedux\nopen Fable.Helpers.ReduxThunk\n\nlet jq = importDefault<obj> \"jquery\"\n\ntype [<Pojo>] NavigationViewState = \n    { \n        trackingIdentifier: string\n        observationIdentifier : string\n        SelectedTrack : string\n        beginDateTimeLocal : DateTime\n        endDateTimeLocal : DateTime\n        VisualizeRecordedTracks : string               \n    }\n\ntype [<Pojo>] ModelViewProps = {\n    onLoadTracks : unit -> unit \n    onBeginTracking : string -> unit\n    onStopTracking : string -> unit\n    onLoadTrackingPoints : DateTime * DateTime * string -> unit\n    onClearTrackingPoints : unit -> unit  \n    onObserve : string -> unit        \n    onUnobserve : string -> unit  \n    onRefresh : unit -> unit\n    onImportTrackingFiles : Browser.File[] -> unit   \n    Tracks : Track List\n    Observed : TrackingJob List\n}\n\n[<KeyValueList>]\ntype AdditionalHtmlAttr = \n    |[<CompiledName(\"data-toggle\")>]DataToggle of string \n    |[<CompiledName(\"data-target\")>]DataTarget of string\n    |[<CompiledName(\"aria-label\")>]AriaLabel of string\n    |[<CompiledName(\"aria-haspopup\")>]AriaHasPopup of string\n    |[<CompiledName(\"aria-expanded\")>]AriaExpanded of string\n    interface IHTMLProp\n\nlet buildUniqueIdentifier t =\n    String.Join(\"\", t.name, t.mintimestamp.ToString())\n\ntype NavigationView(props) =\n    inherit React.Component<ModelViewProps, NavigationViewState>(props)      \n    do base.setInitState({ \n                            trackingIdentifier = \"\"\n                            SelectedTrack = \"\"\n                            observationIdentifier = \"\"\n                            beginDateTimeLocal = DateTime.Now\n                            endDateTimeLocal = DateTime.Now\n                            VisualizeRecordedTracks = \"Visualize Recorded Tracks\"        \n                        })\n\n    member this.componentDidMount (_) =\n        this.props.onLoadTracks()\n    member this.onBeginTracking(_) = \n        this.props.onBeginTracking this.state.trackingIdentifier\n\n    member this.onStopTracking(_) =         \n        this.props.onStopTracking this.state.trackingIdentifier\n\n    member this.onBeginDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { this.state with\n                beginDateTimeLocal = unbox e.target?value                \n            })\n\n    member this.onEndDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { this.state with                \n                endDateTimeLocal = unbox e.target?value                \n            })\n\n    member this.onSelectTrackingFiles(e: React.FormEvent) = \n        let result = box e.target?files        \n        this.props.onImportTrackingFiles(result :?> Browser.File[])\n\n    member this.onTrackSelected(e: React.SyntheticEvent) =\n        let selectedTrackName = unbox e.currentTarget?value\n        let selectedTrack = this.props.Tracks |> List.find (fun i -> buildUniqueIdentifier i = selectedTrackName)        \n        this.setState(\n            { this.state with                \n                SelectedTrack = selectedTrack.name\n                beginDateTimeLocal = selectedTrack.mintimestamp                \n                endDateTimeLocal = selectedTrack.maxtimestamp\n            })\n        let children = jq $ (e.currentTarget?parentNode?children) \n        children?removeClass(\"active\") |> ignore\n        let selectedbutton = jq $ (e.currentTarget) \n        selectedbutton?addClass(\"active\") |> ignore \n        this.props.onLoadTrackingPoints(selectedTrack.mintimestamp, selectedTrack.maxtimestamp, selectedTrack.name)\n\n    member this.onObservationIdentifierChanged (e: React.SyntheticEvent) = \n        this.setState({this.state with observationIdentifier = string (e.target?value) })\n\n    member this.onObserve(e: React.SyntheticEvent) = \n        this.props.onObserve this.state.observationIdentifier\n\n    member this.onObservationChecked(e: React.SyntheticEvent) = \n        let selectedIdentifier = string (e.target?value)\n        let trackingJob = List.find (fun o -> o.identifier = selectedIdentifier) this.props.Observed\n        if trackingJob.subscription.IsNone then \n            this.props.onObserve selectedIdentifier\n        else\n            this.props.onUnobserve selectedIdentifier\n\n    member this.onRefresh(_) = \n        this.props.onRefresh()\n        \n    member this.onLoadTrackingPoints(_) =\n        this.props.onLoadTrackingPoints(this.state.beginDateTimeLocal, this.state.endDateTimeLocal, this.state.SelectedTrack)\n\n    member this.onClearTrackingPoints(_) = \n        this.props.onClearTrackingPoints()\n    member this.getTrackSelection() = \n        R.div [ClassName \"list-group track-selection-list\"]               \n                    (this.props.Tracks\n                    |> List.map (fun t -> R.button [ClassName \"list-group-item\"; OnClick this.onTrackSelected; Value (U2.Case1 (buildUniqueIdentifier t))][\n                                                    R.h4 [] [unbox t.name]\n                                                    R.h6 [] [unbox(t.mintimestamp.ToString())]\n                                                    R.h6 [] [unbox(t.maxtimestamp.ToString())]                                                                                                \n                                                ]        \n                    ))        \n\n    member this.getObservedList() = \n        R.div [ClassName \"list-group observed-list\"]                \n                    (this.props.Observed\n                    |> List.map (fun t -> R.div [ClassName \"list-group-item\";][\n                                                    R.h4 [] [unbox t.identifier; ]\n                                                    R.input [Type \"checkbox\"\n                                                             OnChange this.onObservationChecked\n                                                             Value (U2.Case1 t.identifier)\n                                                             Checked t.subscription.IsSome                                                                      \n                                                            ][ ]\n                                                    R.span [] [unbox \"observation active\"]\n                                                    R.label [] [unbox(\"last updated at:\" + t.utcTimestamp.ToString())]\n                                                    R.label [] [unbox(String.Format(\"last known position: ({0},{1})\", t.latitude, t.longitude))]\n                                                ]        \n                    ))                                \n\n    member this.render () =\n\n        R.div [ ClassName \"masthead clearfix\" ] [\n            R.div [ ClassName \"inner\"] [\n                R.nav [ ClassName \"navbar navbar-default\"] [\n                    R.div [ClassName \"container-fluid\" ] [\n                        R.div [ClassName \"navbar-header\"] [\n                            R.button [ \n                                Type \"button\"\n                                ClassName \"navbar-toggle collapsed\"\n                                DataToggle \"collapse\" \n                                DataTarget \"#bs-example-navbar-collapse-1\"\n                                ] [\n                                    R.span [ClassName \"sr-only\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                             ]\n                            R.button [ Type \"button\"; ClassName \"btn btn-default\"; AriaLabel\"Left Align\"; OnClick this.onRefresh] [\n                                 R.span [ClassName \"glyphicon glyphicon-refresh\"; ] []\n                            ]\n                        ]  \n\n                        R.div [ \n                            Id \"bs-example-navbar-collapse-1\"\n                            ClassName \"collapse navbar-collapse\"] [ \n                                R.ul [ ClassName \"nav navbar-nav\"] [ \n                                    R.li [ Role \"presentation\"; ClassName \"dropdown\" ] [ \n                                       R.a [ ClassName \"dropdown-toggle\"; DataToggle \"dropdown\"; Href \"#\"; Role \"button\"; \n                                             AriaHasPopup \"true\"; AriaExpanded \"false\"; OnClick (fun e -> \n                                                                                        e.stopPropagation()\n                                                                                        e.preventDefault() |> ignore) ] [ \n                                            unbox this.state.VisualizeRecordedTracks\n                                            R.span [ClassName \"caret\"] [ ]\n                                       ]\n                                       R.ul [ ClassName \"dropdown-menu\"] [ \n                                           R.li [] [ \n                                               R.div [ ClassName \"container-fluid\" ] [                                                 \n                                                   R.div [ ClassName \"row\" ] [ \n                                                       this.getTrackSelection()\n                                                   ]\n                                                   R.div [ ClassName \"row\" ] [                                                     \n                                                       R.input [ \n                                                           Type \"file\"\n                                                           OnChange this.onSelectTrackingFiles\n                                                           ] []                                                    \n                                                   ]\n                                               ]\n                                           ]\n                                       ]\n                                    ]\n                                    R.li [ Role \"presentation\"; ClassName \"dropdown\"] [\n                                        R.a [ClassName \"dropdown-toggle\"; DataToggle \"dropdown\"; Href \"#\";\n                                                         Role \"button\"; AriaHasPopup \"true\"; AriaExpanded \"false\"] [\n                                                            R.label [ ] [ unbox \"Observation\" ] //<span class=\"caret\"></span>\n                                                         ]                                                                                        \n                                        R.ul [ClassName \"dropdown-menu\"; Style [MinWidth \"250px\"]] [\n                                                R.li [] [\n                                                    R.div [] [\n                                                        R.div [ClassName \"container-fluid\"] [\n                                                            R.div [ ClassName \"row\" ] [ \n                                                               this.getObservedList()\n                                                            ]\n                                                            R.div [ClassName \"row\"] [\n                                                                R.label[] [unbox \"observe by identifier:\"]\n                                                                R.input [Type \"text\"\n                                                                         Value  (U2.Case1(this.state.observationIdentifier))\n                                                                         OnChange this.onObservationIdentifierChanged][]\n                                                            ]\n                                                            R.div [ClassName \"row\"] [\n                                                                R.button [OnClick this.onObserve ] [unbox \"Observe\"]\n                                                            ]                                                            \n                                                        ]\n                                                    ]\n                                                ]\n                                            ]             \n                                                                                                                        \n                                    ]                                    \n                                ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n\nlet private mapStateToProps (state : LocationTracker) (ownprops : ModelViewProps) =\n    { ownprops with\n        Tracks = state.Tracks   \n        Observed = state.TrackingService.observedTrackingJobs     \n    }\n\nlet private mapDispatchToProps (dispatch : ReactRedux.Dispatcher) ownprops =\n    { ownprops with\n        onLoadTracks = fun () -> dispatch <| asThunk (Backend.getAllTracks)   \n        onLoadTrackingPoints = fun(start, ``end``, trackName) -> dispatch <| asThunk (Backend.loadTrackingPoints(start, ``end``, trackName))\n        onClearTrackingPoints = fun () -> dispatch(Commands.ClearTrackingPoints)\n        onObserve = fun observationIdentifier -> dispatch(Commands.Observe observationIdentifier)        \n        onUnobserve = fun observationIdentifier -> dispatch(Commands.Unobserve observationIdentifier)\n        onRefresh = fun () -> dispatch <| asThunk Backend.refresh\n        onImportTrackingFiles = fun filenames -> dispatch <| asThunk (Backend.parseTrackingPointsFromGpx filenames)\n    }\n\nlet private setDefaultProps (ownprops : ModelViewProps) =\n    { ownprops with\n         Tracks = List.Empty }         \n\nlet createNavigationViewComponent =\n    createConnector ()\n    |> withStateMapper mapStateToProps\n    |> withDispatchMapper mapDispatchToProps\n    |> withProps setDefaultProps\n    |> buildComponent<NavigationView, _, _, _>"]}