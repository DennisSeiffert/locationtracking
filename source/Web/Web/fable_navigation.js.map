{"version":3,"sources":["../fable_navigation.fsx"],"names":[],"mappings":"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","file":"fable_navigation.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"fable_Commands.fsx\"\nopen Commands\n#load \"fable_domainModel.fsx\"\nopen Fable_domainModel\n#load \"fable_backend.fsx\"\nopen Backend\n\nopen Fable.Core\nopen Fable.Import\nopen System\nopen Fable.Core.JsInterop\nmodule R = Fable.Helpers.React\nopen R.Props\nopen Fable.Helpers.ReactRedux\nopen Fable.Helpers.ReduxThunk\n\ntype [<Pojo>] NavigationViewState = \n    { \n        trackingIdentifier: string\n        observationIdentifier : string\n        SelectedTrack : string\n        beginDateTimeLocal : DateTime\n        endDateTimeLocal : DateTime\n        VisualizeRecordedTracks : string               \n    }\n\ntype [<Pojo>] ModelViewProps = {\n    onLoadTracks : unit -> unit \n    onBeginTracking : string -> unit\n    onStopTracking : string -> unit\n    onLoadTrackingPoints : DateTime * DateTime * string -> unit\n    onClearTrackingPoints : unit -> unit  \n    onObserve : string -> unit\n    onImportTrackingFiles : Browser.File[] -> unit   \n    Tracks : Track List\n}\n\n[<KeyValueList>]\ntype AdditionalHtmlAttr = \n    |[<CompiledName(\"data-toggle\")>]DataToggle of string \n    |[<CompiledName(\"data-target\")>]DataTarget of string\n    |[<CompiledName(\"aria-label\")>]AriaLabel of string\n    |[<CompiledName(\"aria-haspopup\")>]AriaHasPopup of string\n    |[<CompiledName(\"aria-expanded\")>]AriaExpanded of string\n    interface IHTMLProp\n\ntype NavigationView(props) =\n    inherit React.Component<ModelViewProps, NavigationViewState>(props)      \n    do base.setInitState({ \n                            trackingIdentifier = \"\"\n                            SelectedTrack = \"\"\n                            observationIdentifier = \"\"\n                            beginDateTimeLocal = DateTime.Now\n                            endDateTimeLocal = DateTime.Now\n                            VisualizeRecordedTracks = \"Visualize Recorded Tracks\"        \n                        })\n\n    member this.componentDidMount (_) =\n        this.props.onLoadTracks()\n    member this.onBeginTracking(_) = \n        this.props.onBeginTracking this.state.trackingIdentifier\n\n    member this.onStopTracking(_) =         \n        this.props.onStopTracking this.state.trackingIdentifier\n\n    member this.onBeginDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { this.state with\n                beginDateTimeLocal = unbox e.target?value                \n            })\n\n    member this.onEndDateTimeLocalChanged(e: React.SyntheticEvent) = \n        this.setState(\n            { this.state with                \n                endDateTimeLocal = unbox e.target?value                \n            })\n\n    member this.onSelectTrackingFiles(e: React.FormEvent) = \n        let result = box e.target?files        \n        this.props.onImportTrackingFiles(result :?> Browser.File[])\n\n    member this.onTrackSelected(e: React.SyntheticEvent) =\n        let selectedTrackName = unbox e.target?text\n        let selectedTrack = this.props.Tracks |> List.find (fun i -> i.name = selectedTrackName)        \n        this.setState(\n            { this.state with                \n                SelectedTrack = selectedTrack.name\n                beginDateTimeLocal = selectedTrack.mintimestamp                \n                endDateTimeLocal = selectedTrack.maxtimestamp\n            })        \n        this.props.onLoadTrackingPoints(selectedTrack.mintimestamp, selectedTrack.maxtimestamp, selectedTrack.name)\n\n    member this.onObservationIdentifierChanged (e: React.SyntheticEvent) = \n        this.setState({this.state with observationIdentifier = string (e.target?value) })\n\n    member this.onObserve(e: React.SyntheticEvent) = \n        this.props.onObserve this.state.observationIdentifier\n\n    member this.onLoadTrackingPoints(_) =\n        this.props.onLoadTrackingPoints(this.state.beginDateTimeLocal, this.state.endDateTimeLocal, this.state.SelectedTrack)\n\n    member this.onClearTrackingPoints(_) = \n        this.props.onClearTrackingPoints()\n    member this.getTrackSelection() = \n        R.div [ClassName \"dropdown\"][\n                R.a [ClassName \"dropdown-toggle\"; Href \"#\"; DataToggle \"dropdown\";\n                            OnClick (fun mouseEvent -> mouseEvent.preventDefault()\n                                                       mouseEvent.stopPropagation() |> ignore);                             \n                            ][\n                    unbox this.state.SelectedTrack\n                    R.span [ClassName \"caret\"][]\n                                                                                                                ]\n                R.ul [ClassName \"dropdown-menu sub-menu\"; Style [Height \"200px\"; Overflow \"Auto\"; ] ]                    \n                    (this.props.Tracks\n                    |> List.map (fun t -> R.li [] [ \n                                                R.div [] [\n                                                    R.a [OnClick this.onTrackSelected; Value (U2.Case1 t.name)][unbox t.name]\n                                                    R.h6 [] [unbox(t.mintimestamp.ToString())]\n                                                    R.h6 [] [unbox(t.maxtimestamp.ToString())]                                                \n                                                \n                                                ]\n                                            ]))                \n        ]\n  \n\n        // R.select [ \n        //             Id \"trackSelection\"                                                           \n        //             Value (U2.Case1 this.state.SelectedTrack)\n        //             OnClick (fun mouseEvent -> mouseEvent.stopPropagation() |> ignore)\n        //             OnChange this.onTrackSelected                                                                                                                                          \n        //          ] (this.props.Tracks\n        //            |> List.map (fun t -> R.option [                                                    \n        //                                              Value (U2.Case1 t.name)\n        //                                            ] [ unbox t.name]))\n\n    member this.render () =\n\n        R.div [ ClassName \"masthead clearfix\" ] [\n            R.div [ ClassName \"inner\"] [\n                R.nav [ ClassName \"navbar navbar-default\"] [\n                    R.div [ClassName \"container-fluid\" ] [\n                        R.div [ClassName \"navbar-header\"] [\n                            R.button [ \n                                Type \"button\"\n                                ClassName \"navbar-toggle collapsed\"\n                                DataToggle \"collapse\" \n                                DataTarget \"#bs-example-navbar-collapse-1\"\n                                ] [\n                                    R.span [ClassName \"sr-only\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                    R.span [ClassName \"icon-bar\" ] []\n                                ]\n                        ]\n                        R.div [ \n                            Id \"bs-example-navbar-collapse-1\"\n                            ClassName \"collapse navbar-collapse\"] [ \n                                R.ul [ ClassName \"nav navbar-nav\"] [ \n                                    R.li [ ] [ \n                                        R.form [ \n                                            ClassName \"form-horizontal\"\n                                            Style [ \n                                                MarginLeft \"15px\" \n                                                MarginRight \"15px\"  ]] [ \n                                                R.div [ ClassName \"form-group\" ] [ \n                                                    R.button [ \n                                                        OnClick this.onBeginTracking\n                                                        ClassName \"btn btn-default btn-succes active\" ] [ \n                                                            unbox \"Track...\"\n                                                    ]\n                                                    R.button [ \n                                                        OnClick this.onStopTracking\n                                                        ClassName \"btn btn-default btn-danger\" ] [ \n                                                            unbox \"Stop Tracking\"\n                                                    ]\n                                                ]\n                                                R.div [ ClassName \"form-group\" ] [\n                                                    R.label [ ClassName \"col-md-4  col-sm-4 col-xs-4 control-label\" ] [ unbox \"Tracking Id\" ]\n                                                    R.div [ ClassName \"col-md-8  col-sm-8 col-xs-11\"; AriaLabel \"...\" ] [\n                                                        R.input [ \n                                                            Type \"text\" \n                                                            Id \"trackIdentifier\" \n                                                            Value (U2.Case1 this.state.trackingIdentifier)\n                                                        ] []                                                    \n                                                    ]                                                    \n                                                ]\n                                        ]\n                                    ]\n                                    R.li [ Role \"presentation\"; ClassName \"dropdown\" ] [ \n                                       R.a [ ClassName \"dropdown-toggle\"; DataToggle \"dropdown\"; Href \"#\"; Role \"button\"; \n                                             AriaHasPopup \"true\"; AriaExpanded \"false\"; OnClick (fun e -> \n                                                                                        e.stopPropagation()\n                                                                                        e.preventDefault() |> ignore) ] [ \n                                            unbox this.state.VisualizeRecordedTracks\n                                            R.span [ClassName \"caret\"] [ ]\n                                       ]\n                                       R.ul [ ClassName \"dropdown-menu\"] [ \n                                           R.li [] [ \n                                               R.div [ ClassName \"container-fluid\" ] [ \n                                                //    R.div [ ClassName \"row\" ] [ \n                                                //        R.label [ ] [ unbox \"from\" ]\n                                                //        R.input [ Type \"datetime\"\n                                                //                  Value (U2.Case1(this.state.beginDateTimeLocal.ToString()))\n                                                //                  OnChange this.onBeginDateTimeLocalChanged ] [ ]\n                                                //    ]\n                                                //    R.div [ ClassName \"row\" ] [ \n                                                //        R.label [ ] [ unbox \"until\" ]\n                                                //        R.input [ Type \"datetime\"\n                                                //                  Value (U2.Case1(this.state.endDateTimeLocal.ToString()))\n                                                //                  OnChange this.onEndDateTimeLocalChanged ] [ ]\n                                                //    ]\n                                                   R.div [ ClassName \"row\" ] [ \n                                                       this.getTrackSelection()\n                                                   ]\n                                                   R.div [ ClassName \"row\" ] [ \n                                                    //    R.button [ \n                                                    //        OnClick this.onLoadTrackingPoints\n                                                    //    ] [ unbox \"Load Track Points\"]\n                                                       R.input [ \n                                                           Type \"file\"\n                                                           OnChange this.onSelectTrackingFiles\n                                                           ] []\n                                                       R.button [ \n                                                           OnClick this.onClearTrackingPoints\n                                                       ] [ unbox \"Clear\"]\n                                                   ]\n                                               ]\n                                           ]\n                                       ]\n                                    ]\n                                    R.li [ Role \"presentation\"; ClassName \"dropdown\"] [\n                                        R.a [ClassName \"dropdown-toggle\"; DataToggle \"dropdown\"; Href \"#\";\n                                                         Role \"button\"; AriaHasPopup \"true\"; AriaExpanded \"false\"] [\n                                                            R.label [ ] [ unbox \"Observation\" ] //<span class=\"caret\"></span>\n                                                         ]                                                                                        \n                                        R.ul [ClassName \"dropdown-menu\"] [\n                                                R.li [] [\n                                                    R.div [] [\n                                                        R.div [ClassName \"container-fluid\"] [\n                                                            R.div [ClassName \"row\"] [\n                                                                R.label[] [unbox \"observe by identifer:\"]\n                                                                R.input [Type \"text\"\n                                                                         Value  (U2.Case1(this.state.observationIdentifier))\n                                                                         OnChange this.onObservationIdentifierChanged][]\n                                                            ]\n                                                            R.div [ClassName \"row\"] [\n                                                                R.button [OnClick this.onObserve ] [unbox \"Observe\"]\n                                                            ]                                                            \n                                                        ]\n                                                    ]\n                                                ]\n                                            ]             \n                                                                                                                        \n                                    ]                                    \n                                ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n                        \n        // let className =\n        //     classNames(\n        //         createObj [\n        //             \"completed\" ==> this.props.todo.completed\n        //             \"editing\" ==> this.props.editing\n        //         ])\n        // // The React helper defines a simple DSL to build HTML elements.\n        // // For more info about transforming F# unions to JS option objects:\n        // // https://fable-compiler.github.io/docs/interacting.html#KeyValueList-attribute\n        // R.li [ ClassName className ] [\n        //     R.div [ ClassName \"view\" ] [\n        //         R.input [\n        //             ClassName \"toggle\"\n        //             Type \"checkbox\"\n        //             Checked this.props.todo.completed\n        //             OnChange this.props.onToggle  \n        //         ] []\n        //         R.label [ OnDoubleClick this.handleEdit ]\n        //                 [ unbox this.props.todo.title ]\n        //         R.button [\n        //             ClassName \"destroy\"\n        //             OnClick this.props.onDestroy ] [ ]\n        //     ]\n        //     R.input [\n        //         ClassName \"edit\"\n        //         Ref (fun x -> editField <- Some x)\n        //         Value (U2.Case1 this.state.editText)\n        //         OnBlur this.handleSubmit\n        //         OnChange this.handleChange\n        //         OnKeyDown this.handleKeyDown\n        //     ] []\n        // ]\n\nlet private mapStateToProps (state : LocationTracker) (ownprops : ModelViewProps) =\n    { ownprops with\n        Tracks = state.Tracks        \n    }\n\nlet private mapDispatchToProps (dispatch : ReactRedux.Dispatcher) ownprops =\n    { ownprops with\n        onLoadTracks = fun () -> dispatch <| asThunk (Backend.getAllTracks)   \n        onLoadTrackingPoints = fun(start, ``end``, trackName) -> dispatch <| asThunk (Backend.loadTrackingPoints(start, ``end``, trackName))\n        onClearTrackingPoints = fun () -> dispatch(Commands.ClearTrackingPoints)\n        onObserve = fun observationIdentifier -> dispatch(Commands.Observe observationIdentifier)\n        onImportTrackingFiles = fun filenames -> dispatch <| asThunk (Backend.parseTrackingPointsFromGpx filenames)\n    }\n\nlet private setDefaultProps (ownprops : ModelViewProps) =\n    { ownprops with\n         Tracks = List.Empty }         \n\nlet createNavigationViewComponent =\n    createConnector ()\n    |> withStateMapper mapStateToProps\n    |> withDispatchMapper mapDispatchToProps\n    |> withProps setDefaultProps\n    |> buildComponent<NavigationView, _, _, _>"]}