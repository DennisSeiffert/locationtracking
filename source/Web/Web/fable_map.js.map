{"version":3,"sources":["../fable_map.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMD,+BAAoB,kCAApB;AAUC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA6BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA,qBAEoB;AAAA;AAAA;AAAA;AAIa;AAJb,SAFpB;AAQsB,mDAAM;AAAA;AACQ;AAAA;AAAA;AAAA;AAAA;AADR,SAAN;AARtB;AAAO;;AAAP;AAAA;AAAA,gCAgB8B;AAAA;AAAC;AAhB/B;AAAA;AAAA,iDAoBS;AAAA;;AAAA,oCACY;AAAA;AAAgB,aAD5B;AAAc;AApBvB;AAAA;AAAA,oCAyBG;AAAA;;AAAA,gBAAG,6BAAH,EACQ;AAA4C,oCAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnB;AAA5C,8BACU;AAAE;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D,iBAA3D,EADV;AAAO;AAC+D;AA3BjF;AAAA;AAAA,2BA8BG;AAAA;;AAAA,gBAAG,2BAA4B,EAAI,6BAAJ,CAA5B,QAAH,EACI;AAAA;AAAA,wBAAG,2CAAH,EACI;AAAA;AAAuC;;AAE9B;AACS,gDACsB;AAAQ;AACZ;AADI;AAAK,qBAD3B,EAIqC,2BAJrC;AAMP;AAAA,8BAAe,2BAAf;AAAA;AAAA;AAAA;AAAA;AACf;;AACA;;AAZA,oCAcc;AAAE;AAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACyC,qBADzC,EAdd;AAAA;AAewD;AAC1D;AA/CL;AAAA;AAAA,2BAqFO;AAAgB;AACN;AAAA;AAAA;AAGuB,wDAHvB;AAAA;AAKqC;AACG;AADH;AALrC;AASJ,0CAAW,4CAAX;AAVN,0BAWU;AAAA;AAAA;AAAA;AAAyE;AAAzE,aAXV;AAAa;AArFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAsGD;AAAA;AACY,yCADZ;AAE2B;AAF3B;AAGC;;AAQD;AAAA;AACa,yBADb;AAE4B;AAF5B;AAGC;;AAED,oCAIG,eADA;AAAA,qBAAU;AAAA;AAAA,KAAV;AAAA,CAFH,CACG;AAAA,2BAAgB;AAAA;AAAA;AAAA;AAAA,KAAhB;AAAA,CADH,oBAGG;AAAA;AAAA;AAAA;AAAA;AAAA,EAJH","file":"fable_map.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"fable_domainModel.fsx\"\nopen Fable.Core\nopen Fable.Import\nopen System\nopen Fable.Core.JsInterop\nmodule R = Fable.Helpers.React\nopen R.Props\nopen Fable_domainModel\nopen Fable.Helpers.ReactRedux\n\ntype GeoOptions = {\n  enableHighAccuracy: bool; \n  maximumAge        : int; \n  timeout           : int;\n}\n\nlet defaultGeoOptions = {enableHighAccuracy = true; maximumAge = 60000; timeout = 20000 }\n\n[<Emit(\"google.maps.MapTypeId.TERRAIN\")>]\nlet terrain() : obj = \n    failwith \"JS only\"\n\n[<Emit(\"google.maps.NavigationControlStyle.SMALL\")>]\nlet small() : obj = \n    failwith \"JS only\"\n\ntype GoogleMapPoint = { Latitude : double; Longitude : double }\n\n[<Emit(\"new google.maps.LatLng($0, $1)\")>]\nlet LatLng(lat: double) (lng:double): GoogleMapPoint =\n    { Latitude = lat; Longitude = lng }\n\n[<Emit(\"new google.maps.LatLngBounds ()\")>]\nlet GooglePointBounds() : obj = \n    failwith \"JS only\"\n\n[<Emit(\"new google.maps.Polyline ({path: $0, strokeColor: \\\"#FF00AA\\\", strokeOpacity: .7, strokeWeight: 4})\")>]\nlet GooglePolyline (points : GoogleMapPoint[]) : obj = \n    failwith \"JS only\"\n\n[<Emit(\"new google.maps.Marker({position: new google.maps.LatLng($0, $1),map:$2,title:$3})\")>]\nlet GoogleMarker (latitude, longitude, map, identifier) : obj = jsNative\n\n[<Emit(\"new google.maps.Map($0, $1)\")>]\nlet GoogleMap(mapHolder:obj) (options:obj) : obj = \n    failwith \"JS only\"\n\n\ntype [<Pojo>] MapViewModel  =\n    { Track : List<TrackingPoint>\n      ObservedTrackingJobs : List<TrackingJob>\n    }\n\ntype [<Pojo>] MapState = { map : obj option; polyLineOfTrack : obj option; needsAnUpdate : bool; markers : List<obj>}\n\ntype MapView(props) =\n    inherit React.Component<MapViewModel, MapState>(props)\n    do base.setInitState({ \n                            map = None  \n                            polyLineOfTrack = None\n                            needsAnUpdate = true\n                            markers = List.Empty\n                        })    \n    member val mapHolder = R.div [ ClassName \"jumbotron\" \n                                   Style [\n                                       PaddingTop \"0px\"\n                                       PaddingBottom \"0px\"\n                                       Height \"400px\"\n                                   ]\n                                    ] [ ]    \n\n    member this.componentDidMount (_) =\n        this.Initialize()\n\n    member this.componentDidUpdate(prevState, actualState) =\n        match this.state.map with    \n            | Some map -> this.showTrack()\n            | _ -> ignore() \n\n    member this.componentWillReceiveProps(nextProps : MapViewModel) = \n        if this.state.map <> None then \n            let markers = nextProps.ObservedTrackingJobs |> List.map (fun i -> GoogleMarker(i.latitude, i.longitude, this.state.map, i.identifier))\n            this.setState({ this.state with needsAnUpdate = true; markers = markers })\n\n    member this.showTrack() =     \n        if this.state.needsAnUpdate && not(List.isEmpty this.props.Track) then\n            if this.state.polyLineOfTrack <> None then\n                this.state.polyLineOfTrack?setMap(null) |> ignore\n\n            let bounds = GooglePointBounds()\n            let googleMapPoints = List.map (fun p -> \n                                                    let point = LatLng p.latitude p.longitude\n                                                    bounds?extend(point) |> ignore                                                \n                                                    point\n                                                ) (this.props.Track |> List.rev)\n            \n            let polyLine = GooglePolyline(Array.ofList googleMapPoints)            \n            polyLine?setMap(this.state.map) |> ignore\n            this.state.map?fitBounds(bounds) |> ignore            \n\n            this.setState({ this.state with polyLineOfTrack = Some polyLine\n                                            needsAnUpdate = false })        \n        ()\n        \n        \n\n//     function showTrack(track){\n//     if (map === undefined) return;\n\n//     var points = [];\n// \tvar bounds = new google.maps.LatLngBounds ();\n// \t$(track.trackingpoints).each(function() {\n// \t  var lat = this.latitude;\n// \t  var lon = this.longitude;      \n// \t  var p = new google.maps.LatLng(lat, lon);\n// \t  points.push(p);\n// \t  bounds.extend(p);\n// \t});\n//     // reverse order to begin with first tracking point at index 0\n//     points = points.reverse();\n//     //geoPoints = geoPoints.reverse();\n\n//     currentTrack = new TrackViewModel(track.trackingpoints);\n//     currentTrack.assignElevationMarker(new google.maps.Marker({position: new google.maps.LatLng(0, 0),map:map,title:\"Elevation Marker\"}));    \n//     currentTrack.calculate();\n\n// \tvar poly = new google.maps.Polyline({\n// \t  // use your own style here\n// \t  path: points,\n// \t  strokeColor: \"#FF00AA\",\n// \t  strokeOpacity: .7,\n// \t  strokeWeight: 4\n// \t});\t\n// \tpoly.setMap(map);\t\t\n// \tmap.fitBounds(bounds);\n\n//     displayPathElevation(points, map, currentTrack)\n// }    \n\n    member this.Initialize() =\n        let initialLatLng = LatLng (0.0) (0.0)\n        let options = createObj [\n                            \"center\" ==> initialLatLng\n                            \"zoom\" ==> 14\n                            \"mapTypeId\" ==>  terrain() //google.maps.MapTypeId.TERRAIN\n                            \"mapTypeControl\" ==> true\n                            \"navigationControlOptions\" ==> createObj \n                                                [\"style\" ==>  small()] //google.maps.NavigationControlStyle.SMALL\n                            ]\n\n        let map = GoogleMap (Browser.document.getElementsByClassName(\"jumbotron\").[0]) (options)\n        this.setState({map = Some map; polyLineOfTrack = None; needsAnUpdate = true; markers = List.Empty })\n    \n    member this.render () =                 \n        this.mapHolder\n\nlet private mapStateToProps (state : LocationTracker) (ownprops : MapViewModel) =\n    { ownprops with\n        Track = state.Visualization.Points\n        ObservedTrackingJobs = state.TrackingService.observedTrackingJobs        \n    }\n// let private mapDispatchToProps (dispatch : ReactRedux.Dispatcher) ownprops =\n//     { ownprops with\n//         onLoadTracks = fun () -> dispatch <| asThunk (Backend.getAllTracks)   \n//         onLoadTrackingPoints = fun(start, ``end``, trackName) -> asThunk (Backend.loadTrackingPoints(start, ``end``, trackName)) |> dispatch\n//     }\n\nlet private setDefaultProps (ownprops : MapViewModel) =\n    { ownprops with\n         Track = List.Empty\n         ObservedTrackingJobs = List.Empty\n    }         \n\nlet createMapViewComponent =\n    createConnector ()\n    |> withStateMapper mapStateToProps    \n    |> withProps setDefaultProps\n    |> buildComponent<MapView, _, _, _>"]}