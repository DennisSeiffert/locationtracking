{"version":3,"sources":["../fable_main.fsx"],"names":[],"mappings":"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","file":"fable_main.js","sourcesContent":["#r \"node_modules/fable-core/Fable.Core.dll\"\n#r \"node_modules/fable-powerpack/Fable.PowerPack.dll\"\n#r \"node_modules/fable-react/Fable.React.dll\"\n#r \"node_modules/fable-redux/Fable.Redux.dll\"\n#r \"node_modules/fable-reactredux/Fable.ReactRedux.dll\"\n#r \"node_modules/fable-reduxthunk/Fable.ReduxThunk.dll\"\n#load \"node_modules/fable-import-fetch/Fable.Import.Fetch.fs\"\n#load \"node_modules/fable-import-fetch/Fable.Helpers.Fetch.fs\"\n#load \"fable_domainModel.fsx\"\nopen Fable_domainModel\n#load \"fable_Commands.fsx\"\nopen Commands\n#load \"fable_navigation.fsx\"\nopen Fable_navigation\n#load \"fable_map.fsx\"\nopen Fable_map\n#load \"fable_elevation.fsx\"\nopen Fable_elevation\n#load \"fable_toastNotifications.fsx\"\nopen Fable_toastNotifications\n#load \"fable_observationServiceWorker.fsx\"\nopen Fable_observationServiceWorker\n// #load \"fable_domainModelTests.fsx\"\n// open Fable_domainModelTests\n\n\nopen Fable.Core\nopen Fable.Import\nopen System\nopen Fable.Core.JsInterop\nopen Fable.Import.Fetch\nopen Fable.Helpers.Fetch\nopen Fable.Helpers.Redux\nopen Fable.Helpers.ReactRedux\n\nmodule R = Fable.Helpers.React\nopen R.Props\n// domain models\n\n\nlet createApp initialState =         \n        R.div [ ClassName \"site-wrapper\"] [ \n            createToastNotifications()\n            R.div [ ClassName \"site-wrapper-inner\"] [ \n                R.div [ ClassName \"cover-container\"] [                     \n                    createNavigationViewComponent()\n                    createMapViewComponent()\n                    createElevationViewComponent()\n                ]\n            ]            \n        ]\n\n\ntype swOptions = {\n    scope : string\n}\n\ntype swMessage = {\n    command : string\n    message : string\n}\nlet subscribe(identifier) =\n    Browser.console.log(\"Requesting broadcast\")    \n    if not(isNull(box Browser.navigator?serviceWorker?controller)) then\n        Browser.console.log(\"Sending message to service worker\");\n        Browser.navigator?serviceWorker?controller?postMessage({\n                                                                command = \"subscribe\"\n                                                                message = identifier\n                                                            }) |> ignore        \n    else\n        Browser.console.log(\"Nove ServiceWorker\")\n    \n    ignore()\n\nlet reducer (domainModel: LocationTracker) = function\n    | BeginTracking identifer ->\n        domainModel\n    | StopTracking identifier -> \n        domainModel        \n    | Unobserve identifier -> \n        domainModel.TrackingService.ReleaseTrack identifier\n        //subscribe(identifier)\n        { domainModel with Info = Some \"unsubscribed from position updates\" }\n    | Observe identifier -> \n        domainModel.TrackingService.Track identifier |> ignore        \n        { domainModel with Info = Some \"subscribed to position updates\" }\n    | ObservationPositionUpdated(identifier, latitude, longitude, timestamputc) ->\n        domainModel.TrackingService.UpdateCoordinates identifier latitude longitude timestamputc\n        domainModel       \n    | LoadTrackingPoints (beginDate, endDate, selectedTrack) -> \n        { domainModel with Visualization = new TrackVisualization(selectedTrack, List.Empty)}\n    | ClearTrackingPoints ->\n        { domainModel with Visualization = new TrackVisualization(String.Empty, List.Empty)}\n    | ReceivedTrack (trackName, trackingPoints) ->\n        let aggregatedPoints = TrackVisualization.calculate (List.ofArray trackingPoints)\n        { domainModel with Visualization = new TrackVisualization(trackName, aggregatedPoints)}\n    | LoadingTracks ->\n        domainModel        \n    | ReceivedTracks tracks ->\n        { domainModel with Tracks = List.ofArray tracks }\n    | ShowElevationMarker point ->        \n        domainModel.Visualization.updateTrackMarker point |> ignore\n        domainModel\n    | ReceivedElevationPoints points ->\n        domainModel.Visualization.AssignElevationPoints points\n        domainModel\n    | ShowError error ->\n        { domainModel with Error = Some error }\n    | ShowInfo info ->\n        { domainModel with Info = Some info }\n    | HideError ->\n        { domainModel with Error = None } \n\nlet reducerWithLocalStorage (domainModel: LocationTracker) command =\n    let dm = reducer domainModel command\n    try\n        Backend.saveLocationTracker dm\n        dm \n    with\n    | _ -> {dm with Error = Some \"error saving location data\"}      \n\nlet registerObervationProviderServiceWorker () = \n    if not(isNull(box Browser.navigator?serviceWorker)) then\n        Browser.console.log(\"ServiceWorkers supported\")\n\n        Browser.navigator?serviceWorker?register(\"observationServiceWorkerPlain.js\", {\n                scope = \"./\"\n            })\n            ?``then``(fun reg ->\n                Browser.console.log(\"ServiceWorker started\", reg)\n            )\n            ?catch(fun error ->\n                Browser.console.log(\"Failed to register ServiceWorker\", error);\n            ) |> ignore\n\nlet registerBroadcastReceiver(dispatch) =\n    Browser.navigator?serviceWorker?onmessage <- fun(event) ->\n        Browser.console.log(\"Broadcasted SW : \", event?data) |> ignore\n\n        let data = event?data\n\n        if string data?command = \"broadcastOnRequest\" then\n            dispatch(Commands.ObservationPositionUpdated(\"subscribed to position updates\", 0.0, 0.0, DateTime.UtcNow))\n            Browser.console.log(\"Broadcasted message from the ServiceWorker : \", data?message) |> ignore\n        ignore() |> ignore\n\nlet mutable store : Redux.IStore<LocationTracker, Commands> option = None\n\nlet onPositionChanged identifier latitude longitude timestamputc = \n    store.Value.dispatch(Commands.ObservationPositionUpdated(identifier, latitude, longitude, timestamputc))    \n\nlet start() = \n    let initialStoreState = None // Backend.loadLocationTracker\n\n    let storeState = match initialStoreState with\n                        | Some x -> { x with \n                                        TrackingService= new TrackingService(new Backend.LocationService(Browser.window.location.origin), onPositionChanged); \n                                        Visualization=new TrackVisualization(name=x.Visualization.TrackName, points = x.Visualization.Points); \n                                    }\n                        | None -> {\n                                    TrackingService= new TrackingService(new Backend.LocationService(Browser.window.location.origin), onPositionChanged); \n                                    Visualization=new TrackVisualization(name=String.Empty, points = TrackVisualization.calculate [{\n                                                                                                        latitude = 8.9\n                                                                                                        longitude = 5.9\n                                                                                                        timestamputc = DateTime.Now\n                                                                                                        speed = 34.9\n                                                                                                        distanceCovered = 0.0\n                                                                                                        distance = 32300.9\n                                                                                                        index = 0\n                                                                                                        elevation = 320.3\n                                                                                                    };\n                                                                                                    {\n                                                                                                        latitude = 9.9\n                                                                                                        longitude = 5.9\n                                                                                                        timestamputc = DateTime.Now\n                                                                                                        speed = 34.9\n                                                                                                        distanceCovered = 0.0\n                                                                                                        distance = 32300.9\n                                                                                                        index = 1\n                                                                                                        elevation = 32.3\n                                                                                                    }]);\n                                    Tracks=[\n                                            {                        \n                                                mintimestamp=DateTime.Now;\n                                                maxtimestamp=DateTime.Now.AddDays(1.0);\n                                                name=\"first Track\"\n                                            };\n                                            {\n                                                mintimestamp=DateTime.Now;\n                                                maxtimestamp=DateTime.Now.AddDays(2.0);\n                                                name=\"second Track\"\n                                            }\n                                           ];\n                                    Error = None\n                                    Info = None\n                                }                   \n    storeState.Visualization.AssignElevationPoints [| {index = 0; elevation = 0.0;};|]        \n    let middleware = Redux.applyMiddleware ReduxThunk.middleware\n    store <- Some (createStore reducerWithLocalStorage storeState (Some middleware))\n    let provider = createProvider store.Value (R.fn createApp (obj()) [])\n    ReactDom.render(provider, Browser.document.getElementsByClassName(\"main\").[0]) |> ignore        \n    //registerBroadcastReceiver(store.dispatch)\n\n//registerObervationProviderServiceWorker()\nstart()"]}